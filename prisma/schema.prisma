generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    birthday      DateTime?
    sex           String?     @default("man")
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    role          String      @default("student") // "student", "company"
    biography     String?     @db.Text
    rating        Float       @default(0)
    skills        String[]    @default([])
    accounts      Account[]
    sessions      Session[]
    projects      Project[]   @relation("CompanyProjects")
    responses     Response[]  @relation("StudentResponses")
    portfolio     Portfolio[]
    reviewsGiven  Review[]    @relation("Reviewer")
    reviewsReceived Review[]  @relation("reviewStud")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Project {
    id           String      @id @default(cuid())
    title        String
    description  String      @db.Text
    deadline     DateTime?
    budget       Float?
    category     String?     // "web", "design", "mobile"
    status       String      @default("open") // "open", "in_progress", "completed", "canceled"
    companyId    String
    company      User        @relation("CompanyProjects", fields: [companyId], references: [id])
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    responses    Response[]  @relation("ProjectResponses")
    reviews      Review[]    @relation("ProjectReviews")
    materials    String[]    @default([])
}

model Response {
    id           String      @id @default(cuid())
    description  String?     @db.Text
    projectId    String
    studentId    String
    student      User        @relation("StudentResponses", fields: [studentId], references: [id], onDelete: Cascade)
    project      Project     @relation("ProjectResponses", fields: [projectId], references: [id], onDelete: Cascade)
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    status       String      @default("pending") // "pending", "accepted", "rejected", "submitted", "approved"
    workLink     String?     @db.Text
    materials    String[]    @default([])
    @@unique([projectId, studentId])
}

model Portfolio {
    id           String      @id @default(cuid())
    studentId    String
    student      User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
    title        String
    description  String?     @db.Text
    link         String?     @db.Text
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
}

model Review {
    id           String      @id @default(cuid())
    projectId    String
    reviewerId   String      
    reviewStudId   String    
    project      Project     @relation("ProjectReviews", fields: [projectId], references: [id], onDelete: Cascade)
    reviewer     User        @relation("Reviewer", fields: [reviewerId], references: [id], onDelete: Cascade)
    reviewStud     User        @relation("reviewStud", fields: [reviewStudId], references: [id], onDelete: Cascade)
    rating       Float       
    comment      String?     @db.Text
    createdAt    DateTime    @default(now())
    @@unique([projectId, reviewStudId])
}